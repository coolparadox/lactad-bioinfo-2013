#!/usr/bin/env perl

#
# Translate a DNA sequence to aminoacids.
#
# This routine was developed as a homework exercise for LaCTAD Bioinformatics Course VI.
# By Rafael Lorandi <coolparadox@gmail.com>.
#

use strict;
use warnings;

use lib 'lib';
use feature 'say';

use Getopt::Long;
use My::Science::Bioinfo ':all';

# Online help definitions.

my $version = "0.1";

my $usage_msg =<<__eof__;
usage: dna_translate -h
   or: dna_translate [OPTIONS...] [SEQUENCE]
__eof__

my $help_msg=<<__eof__;
$usage_msg
Translate a DNA sequence to aminoacids.

  -h, --help          This help screen.
  -v, --version       Version number of this routine.

SEQUENCE is a DNA sequence. If absent, it's read from STDIN.

Aminoacid sequence is sent to STDOUT.

Report bugs to Rafael Lorandi <coolparadox\@gmail.com>.
__eof__

# (Subroutine) Show usage hint and fail.
sub fail_with_usage {

	print STDERR $usage_msg;
	exit 1;

}

#
# Parse CLI options.
#

my ($help_wanted, $version_wanted, $how_many_mutations);
my $options_parsed = GetOptions(

	'help' => \$help_wanted,
	'version' => \$version_wanted,

);
if (!$options_parsed) {

	# Failed to parse all CLI options.
	fail_with_usage;

}
if ($help_wanted) {

	# User wants online help.
	print $help_msg;
	exit 0;
}
if ($version_wanted) {

	# User wants routine version number.
	say $version;
	exit 0;
}
my $dna_sequence = shift;
if (@ARGV) {

	# Too many arguments.
	say STDERR "error: too many arguments.";
	fail_with_usage;

}

#
# Process DNA sequence.
#

if (!defined $dna_sequence) {

	# User did not pass protein sequence in command line.
	# Let's get it from STDIN.
	my @sequences;
	while (<STDIN>) {

		chomp $_;
		push @sequences, $_;

	}
	$dna_sequence = join '', @sequences;

}
chomp $dna_sequence;
if (!is_dna $dna_sequence) {

	say STDERR "error: invalid DNA sequence.";
	exit 1;

}
if ((length $dna_sequence) % 3 != 0) {

	say STDERR "error: length of DNA sequence must be multiple of 3.";
	exit 1;

}
say dna_translate ($dna_sequence);

